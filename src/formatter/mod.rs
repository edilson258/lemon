use crate::lexer::token::TokenType;
use std::fmt;

impl fmt::Display for TokenType {
  fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    match self {
      TokenType::Fn => write!(f, "fn"),
      TokenType::Let => write!(f, "let"),
      TokenType::If => write!(f, "if"),
      TokenType::Else => write!(f, "else"),
      TokenType::Ret => write!(f, "return"),
      TokenType::True => write!(f, "true"),
      TokenType::False => write!(f, "false"),
      TokenType::Null => write!(f, "null"),
      TokenType::Use => write!(f, "use"),
      TokenType::Plus => write!(f, "+"),
      TokenType::Minus => write!(f, "-"),
      TokenType::Star => write!(f, "*"),
      TokenType::Slash => write!(f, "/"),
      TokenType::Assign => write!(f, "="),
      TokenType::PlusEq => write!(f, "+="),
      TokenType::MinusEq => write!(f, "-="),
      TokenType::StarEq => write!(f, "*="),
      TokenType::SlashEq => write!(f, "/="),
      TokenType::Eq => write!(f, "=="),
      TokenType::NotEq => write!(f, "!="),
      TokenType::Less => write!(f, "<"),
      TokenType::Greater => write!(f, ">"),
      TokenType::LessEq => write!(f, "<="),
      TokenType::GreaterEq => write!(f, ">="),
      TokenType::Extract => write!(f, "?="),
      TokenType::Arrow => write!(f, "=>"),
      TokenType::And => write!(f, "&&"),
      TokenType::Or => write!(f, "||"),
      TokenType::Dot => write!(f, "."),
      TokenType::Bang => write!(f, "!"),
      TokenType::Quest => write!(f, "?"),
      TokenType::Colon => write!(f, ":"),
      TokenType::LParen => write!(f, "("),
      TokenType::RParen => write!(f, ")"),
      TokenType::LBrace => write!(f, "{{"),
      TokenType::RBrace => write!(f, "}}"),
      TokenType::LBracket => write!(f, "["),
      TokenType::RBracket => write!(f, "]"),
      TokenType::Semi => write!(f, ";"),
      TokenType::Comma => write!(f, ","),
      TokenType::Ident => write!(f, "identifier"),
      TokenType::String => write!(f, "string"),
      TokenType::Num => write!(f, "number"),
      TokenType::Bool => write!(f, "boolean"),
      TokenType::Ensure => write!(f, "ensure"),
      TokenType::LineCmt => write!(f, "// ..."),
      TokenType::BlockCmt => write!(f, "/* ... */"),
      TokenType::EOF => write!(f, "EOF"),
    }
  }
}
