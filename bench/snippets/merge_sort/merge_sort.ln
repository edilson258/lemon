let mem = import("std/mem.ln");

fn merge(left: &[i32], right: &[i32]): &[i32] = {
  let result = mem.own([]);

  let mut l = 0;
  let mut r = 0;


  while l < left.len() && r < right.len() {
    let lv = mem.borrow(left + l);
    let rv = mem.borrow(right + r);

    if *lv <= *rv {
      result.push(mem.copy(*lv));
      l = l + 1;
    } else {
      result.push(mem.copy(*rv));
      r = r + 1;
    }

    mem.end(lv);
    mem.end(rv);
  }


  while l < left.len() {
    let lv = mem.borrow(left + l);
    result.push(mem.copy(*lv));
    l = l + 1;
    mem.end(lv);
  }


  while r < right.len() {
    let rv = mem.borrow(right + r);
    result.push(mem.copy(*rv));
    r = r + 1;
    mem.end(rv);
  }

  return *result;
}


fn merge_sort(arr: &[i32]): &[i32] = {
  if arr.len() <= 1 {
    return arr;
  }

  let mid = arr.len() / 2;

  let left = mem.borrow(arr + ..mid);
  let right = mem.borrow(arr + mid..);

  let sorted_left = mem.own(merge_sort(*left));
  let sorted_right = mem.own(merge_sort(*right));

  let result = merge(*sorted_left, *sorted_right);

  mem.end(sorted_left);
  mem.end(sorted_right);
  mem.end(left);
  mem.end(right);

  return result;
}


fn main() = {
  let arr = mem.own([5, 2, 9, 1, 5, 6]);

  let sorted = merge_sort(&arr);

  println("Result: ", sorted);
}
