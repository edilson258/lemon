// ok
fn test_multiple_shared_borrows() = {
  let x = 10;
  let r1 = &x;
  let r2 = &x;
  let r3 = &x;
}

// error: cannot borrow `x` as mutable because it is also borrowed as immutable
// fn test_shared_then_mutable_should_fail() = {
//   let mut x = 10;
//   let r1 = &x;
//   let r2 = &mut x; // error aqui
//   // Para funcionar: remover ou garantir que r1 não esteja mais vivo aqui
// }

// válido: shared borrow descartado antes do mutable
fn test_shared_then_mutable_should_pass() = {
  let mut x = 10;
  {
    let r1 = &x;
  } // r1 sai de escopo
  let r2 = &mut x; // permitido agora
}

// error: dois mutable borrows ao mesmo tempo
// error: cannot borrow `x` as mutable more than once at a time
// fn test_two_mutable_borrows_should_fail() = {
//   let mut x = 10;
//   let r1 = &mut x;
//   let r2 = &mut x; // error aqui
//   // Para funcionar: escopo separado ou drop manual de r1
// }

// válido: apenas um mutable borrow por vez
fn test_mutable_then_drop_then_mutable_should_pass() = {
  let mut x = 10;
  {
    let r1 = &mut x;
  } // r1 dropado
  let r2 = &mut x; // permitido
}

// error: retornando referência local
// error: cannot return reference to local value
// fn test_return_local_ref_should_fail() = &i32 {
//   let x = 10;
//   return &x; // error
//   // Para funcionar: x deve ser um parâmetro
// }

// // válido: retornar referência de parâmetro
// fn test_return_param_ref_should_pass(a: &i32) = &i32 {
//   return a; // ok
// }

// // error: união entre ref local e parâmetro
// // error: cannot return reference to local value
// fn test_union_param_and_local_ref_should_fail(a: &i32) = &i32 {
//   let temp = &123;
//   if cond {
//     return a;
//   } else {
//     return temp; // error aqui
//   }
//   // Para funcionar: só usar refs de parâmetros no retorno
// }

// // válido: retorno condicional entre parâmetros
// fn test_union_of_two_param_refs_should_pass(a: &i32, b: &i32) = &i32 {
//   if cond {
//     return a;
//   } else {
//     return b;
//   }
// }

fn main() = {
  test_multiple_shared_borrows();
  // test_shared_then_mutable_should_fail();
  test_shared_then_mutable_should_pass();
  // test_two_mutable_borrows_should_fail();
  test_mutable_then_drop_then_mutable_should_pass();
  // test_return_local_ref_should_fail();
  // test_return_param_ref_should_pass(10);
  // test_union_param_and_local_ref_should_fail(10);
  // test_union_of_two_param_refs_should_pass(10, 20);
}
